# Grocery Stores Scraper

## C·∫•u h√¨nh c∆° s·ªü d·ªØ li·ªáu

- Y√™u c·∫ßu: PostgreSQL + PostGIS

C√†i PostGIS:
```sql
CREATE EXTENSION IF NOT EXISTS postgis;
X·ª≠ l√Ω c·ªôt geom
Khi c√†o d·ªØ li·ªáu, b·∫£ng grocery_stores ch·ªâ c√≥ latitude/longitude.
ƒê·ªÉ ph·ª•c v·ª• hi·ªÉn th·ªã b·∫£n ƒë·ªì (Leaflet/OpenStreetMap), ta c·∫ßn c·ªôt geometry.

1. C·∫≠p nh·∫≠t d·ªØ li·ªáu c≈©
Ch·∫°y 1 l·∫ßn sau khi ƒë√£ c√≥ d·ªØ li·ªáu:

sql
Sao ch√©p m√£
UPDATE grocery_stores
SET geom = ST_SetSRID(ST_MakePoint(longitude, latitude), 4326)
WHERE geom IS NULL
  AND longitude IS NOT NULL
  AND latitude IS NOT NULL;
2. T·ª± ƒë·ªông c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
C√°ch A ‚Äî Trigger trong PostgreSQL
sql
Sao ch√©p m√£
CREATE OR REPLACE FUNCTION set_geom_from_latlon()
RETURNS trigger AS $$
BEGIN
  IF NEW.longitude IS NOT NULL AND NEW.latitude IS NOT NULL THEN
    NEW.geom := ST_SetSRID(ST_MakePoint(NEW.longitude, NEW.latitude), 4326);
  ELSE
    NEW.geom := NULL;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_set_geom ON grocery_stores;
CREATE TRIGGER trg_set_geom
BEFORE INSERT OR UPDATE OF latitude, longitude
ON grocery_stores
FOR EACH ROW
EXECUTE FUNCTION set_geom_from_latlon();
C√°ch B ‚Äî S·ª≠a code insert (Python)
Trong h√†m save_store, th√™m c·ªôt geom:

python
Sao ch√©p m√£
geom = ST_SetSRID(ST_MakePoint(%(longitude)s, %(latitude)s), 4326)
C√°ch C ‚Äî C·ªôt sinh t·ª± ƒë·ªông (generated column)
sql
Sao ch√©p m√£
ALTER TABLE grocery_stores DROP COLUMN IF EXISTS geom;
ALTER TABLE grocery_stores
ADD COLUMN geom geometry(Point,4326)
GENERATED ALWAYS AS (
  ST_SetSRID(ST_MakePoint(longitude, latitude), 4326)
) STORED;
üëâ Khuy√™n d√πng Trigger (C√°ch A): b·ªÅn v·ªØng, kh√¥ng ph·ª• thu·ªôc code ·ª©ng d·ª•ng.

3. T·∫°o index kh√¥ng gian
sql
Sao ch√©p m√£
CREATE INDEX IF NOT EXISTS idx_gs_geom ON grocery_stores USING GIST (geom);